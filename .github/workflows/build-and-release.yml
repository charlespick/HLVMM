name: Version Bump, Build and Release

on:
  push:
    branches:
      - main
      - devel
  pull_request:
    branches:
      - main
      - devel

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
        
    # VERSION BUMP LOGIC (only for pushes to main/devel)
    - name: Check if version file was changed
      if: github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'devel')
      id: version_check
      run: |
        git diff-tree --no-commit-id --name-only -r ${{ github.sha }} > files_changed.txt
        if grep -q "^version$" files_changed.txt; then
          echo "skip_bump=true" >> $GITHUB_OUTPUT
          echo "Version file was already changed in this commit, skipping bump"
        else
          echo "skip_bump=false" >> $GITHUB_OUTPUT
          echo "Version file not changed, will bump version"
        fi
        
    - name: Read current version
      if: github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'devel') && steps.version_check.outputs.skip_bump == 'false'
      id: read_version
      run: |
        version=$(cat version)
        echo "current=$version" >> $GITHUB_OUTPUT
        echo "Current version: $version"

    - name: Increment version
      if: github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'devel') && steps.version_check.outputs.skip_bump == 'false'
      id: bump_version
      run: |
        ver=${{ steps.read_version.outputs.current }}
        IFS='.' read -r major minor build <<< "$ver"
        build=$(printf "%03d" $((10#$build + 1))) # force decimal, keep leading zeros
        new_ver="$major.$minor.$build"
        echo "$new_ver" > version
        echo "new=$new_ver" >> $GITHUB_OUTPUT
        echo "Bumped version to: $new_ver"

    - name: Commit new version
      if: github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'devel') && steps.version_check.outputs.skip_bump == 'false'
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git add version
        git commit -m "ci: bump version to ${{ steps.bump_version.outputs.new }}"
        git push
        echo "Version bump committed and pushed"
        
    # BUILD LOGIC (runs for all events after version bump if needed)
    - name: Install ISO creation tools
      run: |
        sudo apt-get update
        sudo apt-get install -y xorriso genisoimage
        
    - name: Make build script executable
      run: chmod +x Scripts/make_provisioning_isos.sh
      
    - name: Build ISOs
      run: |
        cd Scripts
        ./make_provisioning_isos.sh
        
    - name: List created ISOs
      run: |
        echo "Created ISOs:"
        ls -la ISOs/
        
    # RELEASE LOGIC
    - name: Determine release tag and name
      id: release_info
      run: |
        if [[ "${{ github.ref_name }}" == "main" ]]; then
          echo "tag_name=rolling" >> $GITHUB_OUTPUT
          echo "release_name=Rolling Release" >> $GITHUB_OUTPUT
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
          echo "create_release=true" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref_name }}" == "devel" ]] || [[ "${{ github.ref_name }}" == "cloud-builds-and-env-based-devel" ]]; then
          echo "tag_name=development" >> $GITHUB_OUTPUT
          echo "release_name=Development Release" >> $GITHUB_OUTPUT
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
          echo "create_release=true" >> $GITHUB_OUTPUT
        else
          echo "tag_name=" >> $GITHUB_OUTPUT
          echo "release_name=" >> $GITHUB_OUTPUT
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
          echo "create_release=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Delete existing release (if exists)
      if: github.event_name == 'push' && steps.release_info.outputs.create_release == 'true'
      run: |
        TAG_NAME="${{ steps.release_info.outputs.tag_name }}"
        
        # Check if release exists and delete it
        if gh release view "$TAG_NAME" >/dev/null 2>&1; then
          echo "Deleting existing release: $TAG_NAME"
          gh release delete "$TAG_NAME" --yes
        else
          echo "Release $TAG_NAME does not exist, creating new one"
        fi
        
        # Delete the tag if it exists
        if git tag -l | grep -q "^${TAG_NAME}$"; then
          echo "Deleting existing local tag: $TAG_NAME"
          git tag -d "$TAG_NAME" || true
        fi
        
        # Delete the remote tag if it exists
        if git ls-remote --exit-code origin refs/tags/"$TAG_NAME" >/dev/null 2>&1; then
          echo "Deleting existing remote tag: $TAG_NAME"
          git push origin --delete "$TAG_NAME" || true
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create new release
      if: github.event_name == 'push' && steps.release_info.outputs.create_release == 'true'
      run: |
        TAG_NAME="${{ steps.release_info.outputs.tag_name }}"
        RELEASE_NAME="${{ steps.release_info.outputs.release_name }}"
        IS_PRERELEASE="${{ steps.release_info.outputs.is_prerelease }}"
        
        # Get version from version file (now contains the bumped version)
        VERSION_CONTENT=""
        if [ -f "version" ]; then
          VERSION_CONTENT=$(cat version)
        fi
        
        # Create release notes
        cat << EOF > release_notes.md
        ## Automated Build - $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        
        **Branch:** \`${{ github.ref_name }}\`
        **Commit:** \`${{ github.sha }}\`
        **Version:** \`${VERSION_CONTENT}\`
        
        ### Artifacts
        - **WindowsProvisioning.iso** - Provisioning ISO for Windows systems
        - **LinuxProvisioning.iso** - Provisioning ISO for Linux systems (cloud-init compatible)
        
        ### Build Information
        - Built on: Ubuntu Latest
        - ISO Tools: xorriso, genisoimage
        - Workflow: ${{ github.workflow }}
        - Run: #${{ github.run_number }}
        EOF

        # Create prerelease flag
        PRERELEASE_FLAG=""
        if [ "$IS_PRERELEASE" == "true" ]; then
          PRERELEASE_FLAG="--prerelease"
        fi
        
        # Create the tag on the current commit first
        git tag "$TAG_NAME"
        git push origin "$TAG_NAME" --force
        
        # Create the release
        gh release create "$TAG_NAME" \
          --title "$RELEASE_NAME" \
          --notes-file release_notes.md \
          $PRERELEASE_FLAG \
          ISOs/WindowsProvisioning.iso \
          ISOs/LinuxProvisioning.iso
          
        echo "Created release: $RELEASE_NAME ($TAG_NAME)"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload artifacts for PR builds
      if: github.event_name == 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: provisioning-isos-pr-${{ github.event.number }}
        path: |
          ISOs/WindowsProvisioning.iso
          ISOs/LinuxProvisioning.iso
        retention-days: 7
        
    - name: Comment on PR with download links
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const runId = context.runId;
          const prNumber = context.issue.number;
          
          // Get version for PR comment
          const fs = require('fs');
          let version = 'unknown';
          try {
            version = fs.readFileSync('version', 'utf8').trim();
          } catch (e) {
            console.log('Could not read version file');
          }
          
          const comment = `## ðŸ”¨ Build Completed Successfully!
          
          The provisioning ISOs have been built and are available as artifacts.
          
          **Download Links:**
          - [Download Build Artifacts](https://github.com/${{ github.repository }}/actions/runs/${runId})
          
          **Artifacts:**
          - \`WindowsProvisioning.iso\` - Provisioning ISO for Windows systems
          - \`LinuxProvisioning.iso\` - Provisioning ISO for Linux systems (cloud-init compatible)
          
          **Build Details:**
          - Version: \`${version}\`
          - Commit: \`${{ github.sha }}\`
          - Branch: \`${{ github.head_ref }}\`
          - Workflow Run: #${{ github.run_number }}
          
          Artifacts will be retained for 7 days.`;
          
          github.rest.issues.createComment({
            issue_number: prNumber,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });