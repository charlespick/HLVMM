name: Version Bump, Build and Release

on:
  push:
    branches:
      - main
      - devel
  pull_request:
    branches:
      - main
      - devel

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
      issues: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
        
    # VERSION BUMP LOGIC (only for pushes to main/devel)
    - name: Check if version file was changed
      if: github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'devel')
      id: version_check
      run: |
        git diff-tree --no-commit-id --name-only -r ${{ github.sha }} > files_changed.txt
        if grep -q "^version$" files_changed.txt; then
          echo "skip_bump=true" >> $GITHUB_OUTPUT
          echo "Version file was already changed in this commit, skipping bump"
        else
          echo "skip_bump=false" >> $GITHUB_OUTPUT
          echo "Version file not changed, will bump version"
        fi
        
    - name: Read current version
      if: github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'devel') && steps.version_check.outputs.skip_bump == 'false'
      id: read_version
      run: |
        version=$(cat version)
        echo "current=$version" >> $GITHUB_OUTPUT
        echo "Current version: $version"

    - name: Increment version
      if: github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'devel') && steps.version_check.outputs.skip_bump == 'false'
      id: bump_version
      run: |
        ver=${{ steps.read_version.outputs.current }}
        IFS='.' read -r major minor build <<< "$ver"
        build=$(printf "%03d" $((10#$build + 1))) # force decimal, keep leading zeros
        new_ver="$major.$minor.$build"
        echo "$new_ver" > version
        echo "new=$new_ver" >> $GITHUB_OUTPUT
        echo "Bumped version to: $new_ver"

    - name: Commit new version
      if: github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'devel') && steps.version_check.outputs.skip_bump == 'false'
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git add version
        git commit -m "ci: bump version to ${{ steps.bump_version.outputs.new }}"
        git push
        echo "Version bump committed and pushed"
        
    # BUILD LOGIC (runs for all events after version bump if needed)
    - name: Install ISO creation tools
      run: |
        sudo apt-get update
        sudo apt-get install -y xorriso genisoimage
        
    - name: Make build script executable
      run: chmod +x Scripts/make_provisioning_isos.sh
      
    - name: Build ISOs
      run: |
        cd Scripts
        ./make_provisioning_isos.sh
        
    - name: List created ISOs
      run: |
        echo "Created ISOs:"
        ls -la ISOs/
        
    # RELEASE LOGIC
    - name: Determine release strategy
      id: release_info
      run: |
        if [[ "${{ github.ref_name }}" == "main" ]]; then
          echo "create_standard_release=true" >> $GITHUB_OUTPUT
          echo "create_devel_artifacts=false" >> $GITHUB_OUTPUT
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref_name }}" == "devel" ]]; then
          echo "create_standard_release=false" >> $GITHUB_OUTPUT
          echo "create_devel_artifacts=true" >> $GITHUB_OUTPUT
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "create_standard_release=false" >> $GITHUB_OUTPUT
          echo "create_devel_artifacts=false" >> $GITHUB_OUTPUT
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
        fi
        
    # MAIN BRANCH: Create standard release (uses GitHub's /latest endpoint)
    - name: Create standard release for main
      if: github.event_name == 'push' && steps.release_info.outputs.create_standard_release == 'true'
      run: |
        # Get version from version file (now contains the bumped version)
        VERSION_CONTENT=""
        if [ -f "version" ]; then
          VERSION_CONTENT=$(cat version)
        fi
        
        # Use version as tag name for standard releases
        TAG_NAME="v${VERSION_CONTENT}"
        
        # Create release notes
        cat << EOF > release_notes.md
        ## Release ${VERSION_CONTENT} - $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        
        **Branch:** \`${{ github.ref_name }}\`
        **Commit:** \`${{ github.sha }}\`
        **Version:** \`${VERSION_CONTENT}\`
        
        ### Artifacts
        - **WindowsProvisioning.iso** - Provisioning ISO for Windows systems
        - **LinuxProvisioning.iso** - Provisioning ISO for Linux systems (cloud-init compatible)
        
        ### Build Information
        - Built on: Ubuntu Latest
        - ISO Tools: xorriso, genisoimage
        - Workflow: ${{ github.workflow }}
        - Run: #${{ github.run_number }}
        
        ### Download URLs
        These artifacts are available at stable URLs:
        - Windows ISO: \`https://github.com/${{ github.repository }}/releases/latest/download/WindowsProvisioning.iso\`
        - Linux ISO: \`https://github.com/${{ github.repository }}/releases/latest/download/LinuxProvisioning.iso\`
        EOF
        
        # Create the release
        gh release create "$TAG_NAME" \
          --title "Release $VERSION_CONTENT" \
          --notes-file release_notes.md \
          ISOs/WindowsProvisioning.iso \
          ISOs/LinuxProvisioning.iso
          
        echo "Created standard release: $TAG_NAME"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # DEVEL BRANCH: Create artifacts and update GitHub Pages redirect        
    - name: Upload devel artifacts
      if: github.event_name == 'push' && steps.release_info.outputs.create_devel_artifacts == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: devel-provisioning-isos-${{ github.run_number }}
        path: |
          ISOs/WindowsProvisioning.iso
          ISOs/LinuxProvisioning.iso
        retention-days: 7

    - name: Update GitHub Pages redirect for devel
      if: github.event_name == 'push' && steps.release_info.outputs.create_devel_artifacts == 'true'
      run: |
        # Get version for redirect page
        VERSION_CONTENT=""
        if [ -f "version" ]; then
          VERSION_CONTENT=$(cat version)
        fi
        
        # Clone gh-pages branch or create it if it doesn't exist
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        
        # Check if gh-pages branch exists
        if git ls-remote --exit-code origin gh-pages >/dev/null 2>&1; then
          git fetch origin gh-pages
          git checkout gh-pages
        else
          git checkout --orphan gh-pages
          git rm -rf .
        fi
        
        # Create artifact URLs
        ARTIFACT_BASE_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts"
        
        # Create redirect pages
        mkdir -p latest
        
        # Create main redirect page
        cat << 'EOF' > latest/index.html
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="utf-8">
          <title>HLVMM Development Artifacts</title>
          <meta name="description" content="Latest development artifacts for HLVMM">
        </head>
        <body>
          <h1>HLVMM Development Artifacts</h1>
          <p>This page provides stable URLs for the latest development artifacts.</p>
          <ul>
            <li><a href="WindowsProvisioning.iso">WindowsProvisioning.iso</a></li>
            <li><a href="LinuxProvisioning.iso">LinuxProvisioning.iso</a></li>
          </ul>
          <p>Build: #${{ github.run_number }} | Version: VERSION_CONTENT | Branch: devel</p>
          <p>Updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')</p>
        </body>
        </html>
        EOF
        
        # Replace VERSION_CONTENT placeholder
        sed -i "s/VERSION_CONTENT/${VERSION_CONTENT}/g" latest/index.html
        
        # Create individual ISO redirect pages
        cat << 'EOF' > latest/WindowsProvisioning.iso
        <!DOCTYPE html>
        <html>
        <head>
          <meta http-equiv="refresh" content="0; url=ARTIFACT_URL">
          <meta charset="utf-8">
          <title>Redirecting to WindowsProvisioning.iso</title>
        </head>
        <body>
          <p>Redirecting to <a href="ARTIFACT_URL">WindowsProvisioning.iso</a>...</p>
          <script>window.location.href = "ARTIFACT_URL";</script>
        </body>
        </html>
        EOF
        
        cat << 'EOF' > latest/LinuxProvisioning.iso
        <!DOCTYPE html>
        <html>
        <head>
          <meta http-equiv="refresh" content="0; url=ARTIFACT_URL">
          <meta charset="utf-8">
          <title>Redirecting to LinuxProvisioning.iso</title>
        </head>
        <body>
          <p>Redirecting to <a href="ARTIFACT_URL">LinuxProvisioning.iso</a>...</p>
          <script>window.location.href = "ARTIFACT_URL";</script>
        </body>
        </html>
        EOF
        
        # Note: We can't get the exact artifact download URLs until after upload
        # So we create a placeholder that will be updated by a separate API call
        # For now, point to the Actions run page
        WINDOWS_REDIRECT_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        LINUX_REDIRECT_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        
        sed -i "s|ARTIFACT_URL|${WINDOWS_REDIRECT_URL}|g" latest/WindowsProvisioning.iso
        sed -i "s|ARTIFACT_URL|${LINUX_REDIRECT_URL}|g" latest/LinuxProvisioning.iso
        
        # Create README
        cat << EOF > README.md
        # HLVMM GitHub Pages
        
        This branch contains GitHub Pages content for stable development artifact URLs.
        
        ## Development Artifacts
        
        - [Windows Provisioning ISO](https://charlespick.github.io/HLVMM/latest/WindowsProvisioning.iso)
        - [Linux Provisioning ISO](https://charlespick.github.io/HLVMM/latest/LinuxProvisioning.iso)
        
        Last updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        Build: #${{ github.run_number }}
        Version: ${VERSION_CONTENT}
        EOF
        
        # Commit and push
        git add .
        git commit -m "Update devel artifacts redirect - build #${{ github.run_number }}"
        git push origin gh-pages
        
        echo "Updated GitHub Pages redirect for devel artifacts"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload artifacts for PR builds
      if: github.event_name == 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: provisioning-isos-pr-${{ github.event.number }}
        path: |
          ISOs/WindowsProvisioning.iso
          ISOs/LinuxProvisioning.iso
        retention-days: 7
        
    - name: Comment on PR with download links
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const runId = context.runId;
          const prNumber = context.issue.number;
          
          // Get version for PR comment
          const fs = require('fs');
          let version = 'unknown';
          try {
            version = fs.readFileSync('version', 'utf8').trim();
          } catch (e) {
            console.log('Could not read version file');
          }
          
          const comment = `## 🔨 Build Completed Successfully!
          
          The provisioning ISOs have been built and are available as artifacts.
          
          **Download Links:**
          - [Download Build Artifacts](https://github.com/${{ github.repository }}/actions/runs/${runId})
          
          **Artifacts:**
          - \`WindowsProvisioning.iso\` - Provisioning ISO for Windows systems
          - \`LinuxProvisioning.iso\` - Provisioning ISO for Linux systems (cloud-init compatible)
          
          **Build Details:**
          - Version: \`${version}\`
          - Commit: \`${{ github.sha }}\`
          - Branch: \`${{ github.head_ref }}\`
          - Workflow Run: #${{ github.run_number }}
          
          Artifacts will be retained for 7 days.`;
          
          github.rest.issues.createComment({
            issue_number: prNumber,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });