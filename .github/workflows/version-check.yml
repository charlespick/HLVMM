name: Version Check

on:
  pull_request:
    branches:
      - main

jobs:
  version-check:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: write
      
    steps:
    - name: Checkout PR branch
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Version Check
      id: version_check
      run: |
        # Get the list of changed files in this PR
        git diff --name-only origin/main...HEAD > changed_files.txt
        
        # Check if version file was changed
        if ! grep -q "^version$" changed_files.txt; then
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "‚ùå Version file was not changed in this PR"
          echo "::error::Version file must be updated in PRs to main branch"
          echo "Please update the version file to reflect the changes in this PR"
          exit 1
        fi
        
        echo "changed=true" >> $GITHUB_OUTPUT
        echo "‚úÖ Version file was changed in this PR"
        
        # Get the version from main branch
        git checkout origin/main
        main_version=$(cat version | tr -d '\n\r\t ')
        echo "Main branch version: $main_version"
        
        # Get the version from PR branch
        git checkout ${{ github.head_ref }}
        pr_version=$(cat version | tr -d '\n\r\t ')
        echo "PR branch version: $pr_version"
        
        echo "Comparing versions:"
        echo "  Main: $main_version"
        echo "  PR:   $pr_version"
        
        # Function to compare semantic versions
        compare_versions() {
          local ver1=$1
          local ver2=$2
          
          # Split versions into components
          IFS='.' read -r maj1 min1 bld1 <<< "$ver1"
          IFS='.' read -r maj2 min2 bld2 <<< "$ver2"
          
          # Convert to integers for comparison (remove leading zeros)
          maj1=$((10#$maj1))
          min1=$((10#$min1))
          bld1=$((10#$bld1))
          maj2=$((10#$maj2))
          min2=$((10#$min2))
          bld2=$((10#$bld2))
          
          # Compare major version
          if [ $maj2 -gt $maj1 ]; then
            return 0  # PR version is higher
          elif [ $maj2 -lt $maj1 ]; then
            return 1  # PR version is lower
          fi
          
          # Major versions are equal, compare minor
          if [ $min2 -gt $min1 ]; then
            return 0  # PR version is higher
          elif [ $min2 -lt $min1 ]; then
            return 1  # PR version is lower
          fi
          
          # Major and minor are equal, compare build
          if [ $bld2 -gt $bld1 ]; then
            return 0  # PR version is higher
          else
            return 1  # PR version is lower or equal
          fi
        }
        
        # Compare versions and fail if not incremented
        if compare_versions "$main_version" "$pr_version"; then
          echo "valid=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Version increase is valid: $main_version ‚Üí $pr_version"
          echo "üéâ Version check passed!"
        else
          echo "valid=false" >> $GITHUB_OUTPUT
          echo "‚ùå Version must be higher than main branch: $main_version ‚Üí $pr_version"
          echo "::error::PR version must be higher than main branch version"
          echo "Current main version: $main_version"
          echo "PR version: $pr_version"
          echo "Please update the version to be higher than the main branch"
          exit 1
        fi

        